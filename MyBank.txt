//Bank Contract for hackathon
pragma solidity ^0.5.0;
contract Bank{
    //Defining the structure of AccountHolder
    //As the statement said user can have one or more type of coin balances
    //I have decided to use this simple structure
    //function close() public onlyOwner { 
         //selfdestruct(owner);  
    //}
    address owner;
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(
            msg.sender == owner,
            "You must be the owner."
        );
        _;
    }
    struct AccountHolder{
        bytes32 name;
        uint ethbalance;
        uint altcoinbalance;
    }
    mapping(address=>AccountHolder) AccountHolders;
    address[] public HolderAccountsAdresses;
    
    function deposit(address _address,bytes32 _name,uint _ethbalance,uint _altcoinbalance) public{
        AccountHolders[_address].name=_name;
        AccountHolders[_address].ethbalance=_ethbalance;
        AccountHolders[_address].altcoinbalance=_altcoinbalance;
        HolderAccountsAdresses.push(_address);
    }
    function check(address _address,uint _amount) public returns(bool){
        if(AccountHolders[_address].ethbalance-_amount >=0){
            return true;
        }
        return false;
    }
    function withdraweth(address _address,uint _amount) public returns(uint) {
        if(check(_address,_amount)==true){
            AccountHolders[_address].ethbalance-=_amount;
            return AccountHolders[_address].ethbalance;
        }
    }
    function balanceinfo(address _address) public view returns(uint){
        return AccountHolders[_address].ethbalance;
    }
    
}